[{"D:\\React\\React Projects\\Real React Projects\\PDF Viewer\\pdfviewer\\src\\index.js":"1","D:\\React\\React Projects\\Real React Projects\\PDF Viewer\\pdfviewer\\src\\App.js":"2","D:\\React\\React Projects\\Real React Projects\\PDF Viewer\\pdfviewer\\src\\component\\Main.js":"3"},{"size":411,"mtime":1611416961994,"results":"4","hashOfConfig":"5"},{"size":146,"mtime":1611417054343,"results":"6","hashOfConfig":"5"},{"size":6337,"mtime":1611629973357,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"1h0b2ph",{"filePath":"11","messages":"12","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},{"filePath":"13","messages":"14","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15"},"D:\\React\\React Projects\\Real React Projects\\PDF Viewer\\pdfviewer\\src\\index.js",[],["16","17"],"D:\\React\\React Projects\\Real React Projects\\PDF Viewer\\pdfviewer\\src\\App.js",[],"D:\\React\\React Projects\\Real React Projects\\PDF Viewer\\pdfviewer\\src\\component\\Main.js",["18","19","20","21","22","23"],"import React, {useState} from 'react'\r\nimport { PDFDocument } from 'pdf-lib'\r\nimport { Document, Page } from 'react-pdf/dist/esm/entry.webpack';\r\n\r\nimport { degrees, rgb, StandardFonts } from 'pdf-lib';\r\nimport { saveAs } from '@progress/kendo-file-saver';\r\n//https://www.telerik.com/kendo-react-ui/components/filesaver/\r\n\r\nimport \"../Styles.css\"\r\n\r\nconst Main = () => {\r\n\r\n\r\n    const [type, setType] = useState(\"\");\r\n    const [name, setName] = useState(\"\");\r\n    const [org, setOrg] = useState(\"\");\r\n    const [content, setContent] = useState(\"\");\r\n    const [headname, setHeadName] = useState(\"\");\r\n    const [position, setPosition] = useState(\"\");\r\n\r\n    const [fileName, setFileName] = useState(\"\");\r\n\r\n    const [file, setFile] = useState('');\r\n    const [template, setTemplate] = useState('');\r\n\r\n\r\n    const [numPages, setNumPages] = useState(null);\r\n    const [pageNumber, setPageNumber] = useState(1);\r\n\r\n    \r\n    // Selecting template pdf -------------------\r\n\r\n    const selectTemplate = (e) => {\r\n        const myFile = e.target.files[0];\r\n\r\n        // Getting the array bytes ofr the selected PDF file\r\n\r\n        var reader = new FileReader();\r\n        reader.readAsArrayBuffer(myFile);\r\n        reader.onloadend = function (evt) {\r\n            if (evt.target.readyState == FileReader.DONE) {\r\n               var arrayBuffer = evt.target.result,\r\n                   array = new Uint8Array(arrayBuffer);\r\n                setTemplate(array);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    // Counting pages of pdf for React-pdf -------------------\r\n\r\n\r\n    function onDocumentLoadSuccess({ numPages }) {\r\n        setNumPages(numPages);\r\n    }\r\n\r\n\r\n    // Creating pdf with pdf-lib library-------------------\r\n\r\n    const createPDF = async () => {\r\n\r\n\r\n        if(type && org && name && content && headname && position){\r\n\r\n            const pdfDoc = await PDFDocument.load(template)\r\n        \r\n            //Setting custom text in the PDF file\r\n\r\n            const pages = pdfDoc.getPages()\r\n            const firstPage = pages[0]\r\n            const { width, height } = firstPage.getSize()\r\n\r\n            const color = rgb(0, 0, 0);\r\n\r\n            drawText(pdfDoc ,firstPage, 304, 520, color, type, 30);\r\n            drawText(pdfDoc ,firstPage, 304, 400, color, org, 26);\r\n            drawText(pdfDoc ,firstPage, 304, 330, color, name, 50);\r\n            drawText(pdfDoc ,firstPage, 304, 280, color, content, 20);\r\n            drawText(pdfDoc ,firstPage, 304, 100, color, headname, 22);\r\n            drawText(pdfDoc ,firstPage, 540, 100, color, position, 22);\r\n        \r\n            const pdfBytes = await pdfDoc.saveAsBase64({dataUri: true});\r\n\r\n            console.log(pdfBytes)\r\n\r\n            setFile(pdfBytes);\r\n        \r\n        }\r\n    }\r\n\r\n\r\n    // Download PDF using kendo-file-saver\r\n\r\n    const downloadPDF = () => {\r\n        const dataURI = file;\r\n        saveAs(dataURI, `${fileName}.pdf`);\r\n    }\r\n\r\n\r\n\r\n    // Function for drawing text\r\n\r\n    const drawText = async (pdf ,pageNum , X , Y, color, text, size) =>{\r\n\r\n        const helveticaFont = await pdf.embedFont(StandardFonts.Helvetica)\r\n\r\n        pageNum.drawText(`${text}`, {\r\n            x: X,\r\n            y: Y,\r\n            size: size,\r\n            font: helveticaFont,\r\n            color: color,\r\n        })\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"input-field\">\r\n\r\n                <div className=\"input-box\">\r\n                    <input placeholder=\"Enter certificate type\" value={type}\r\n                    onChange={(e) => setType(e.target.value)}\r\n                    required></input>\r\n                </div>\r\n\r\n                <div className=\"input-box\">\r\n                    <input placeholder=\"Enter organization name\" value={org}\r\n                    onChange={(e) => setOrg(e.target.value)}\r\n                    required></input>\r\n                </div>\r\n\r\n                <div className=\"input-box\">\r\n                    <input placeholder=\"Enter name\" value={name}\r\n                    onChange={(e) => setName(e.target.value)}\r\n                    required></input>\r\n                </div>\r\n                <div className=\"input-box\">\r\n                    <textarea rows=\"6\" cols=\"10\" placeholder=\"Enter content\" \r\n                    value = {content} onChange={(e) => setContent(e.target.value)}\r\n                    required></textarea>\r\n                </div>\r\n\r\n                <div className=\"input-box\">\r\n                    <input placeholder=\"Enter name\" value={headname}\r\n                    onChange={(e) => setHeadName(e.target.value)}\r\n                    required></input>\r\n                </div>\r\n\r\n                <div className=\"input-box\">\r\n                    <input placeholder=\"Enter position\" value={position}\r\n                    onChange={(e) => setPosition(e.target.value)}\r\n                    required></input>\r\n                </div>\r\n\r\n                <p className=\"guide\">Select template :</p>\r\n\r\n                <input type=\"file\" accept=\".pdf\" onChange={(e) => selectTemplate(e)}></input>\r\n                <div className=\"submit-btn\">\r\n                    <button onClick={() => createPDF()}>\r\n                        Create PDF\r\n                    </button>\r\n                </div>\r\n                \r\n            </div>\r\n\r\n\r\n            <div className=\"preview-container\">\r\n                <Document file={file}\r\n                    onLoadSuccess={onDocumentLoadSuccess}>\r\n                    <Page pageNumber={pageNumber} />\r\n                </Document>\r\n\r\n\r\n                {file && (\r\n                    <div className=\"download-sec\">\r\n                        <div className=\"input-box\">\r\n                            <input placeholder=\"Enter file name\" value={fileName}\r\n                            onChange={(e) => setFileName(e.target.value)}\r\n                            required></input>\r\n                        </div>\r\n                    \r\n                        <div className=\"download-btn\">\r\n                            <button onClick={() => downloadPDF()}>\r\n                                Download PDF\r\n                            </button>\r\n                        </div>\r\n                    \r\n                    </div>\r\n\r\n                )}\r\n\r\n                \r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Main\r\n",{"ruleId":"24","replacedBy":"25"},{"ruleId":"26","replacedBy":"27"},{"ruleId":"28","severity":1,"message":"29","line":5,"column":10,"nodeType":"30","messageId":"31","endLine":5,"endColumn":17},{"ruleId":"28","severity":1,"message":"32","line":27,"column":12,"nodeType":"30","messageId":"31","endLine":27,"endColumn":20},{"ruleId":"28","severity":1,"message":"33","line":28,"column":24,"nodeType":"30","messageId":"31","endLine":28,"endColumn":37},{"ruleId":"34","severity":1,"message":"35","line":41,"column":39,"nodeType":"36","messageId":"37","endLine":41,"endColumn":41},{"ruleId":"28","severity":1,"message":"38","line":71,"column":21,"nodeType":"30","messageId":"31","endLine":71,"endColumn":26},{"ruleId":"28","severity":1,"message":"39","line":71,"column":28,"nodeType":"30","messageId":"31","endLine":71,"endColumn":34},"no-native-reassign",["40"],"no-negated-in-lhs",["41"],"no-unused-vars","'degrees' is defined but never used.","Identifier","unusedVar","'numPages' is assigned a value but never used.","'setPageNumber' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'width' is assigned a value but never used.","'height' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]